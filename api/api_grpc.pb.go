// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	schema "github.com/tweag/trustix/schema"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrustixLogAPIClient is the client API for TrustixLogAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixLogAPIClient interface {
	GetSTH(ctx context.Context, in *STHRequest, opts ...grpc.CallOption) (*schema.STH, error)
	GetLogConsistencyProof(ctx context.Context, in *GetLogConsistencyProofRequest, opts ...grpc.CallOption) (*ProofResponse, error)
	GetLogAuditProof(ctx context.Context, in *GetLogAuditProofRequest, opts ...grpc.CallOption) (*ProofResponse, error)
	GetLogEntries(ctx context.Context, in *GetLogEntriesRequest, opts ...grpc.CallOption) (*LogEntriesResponse, error)
	GetMapValue(ctx context.Context, in *GetMapValueRequest, opts ...grpc.CallOption) (*MapValueResponse, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
}

type trustixLogAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixLogAPIClient(cc grpc.ClientConnInterface) TrustixLogAPIClient {
	return &trustixLogAPIClient{cc}
}

func (c *trustixLogAPIClient) GetSTH(ctx context.Context, in *STHRequest, opts ...grpc.CallOption) (*schema.STH, error) {
	out := new(schema.STH)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLogAPI/GetSTH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixLogAPIClient) GetLogConsistencyProof(ctx context.Context, in *GetLogConsistencyProofRequest, opts ...grpc.CallOption) (*ProofResponse, error) {
	out := new(ProofResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLogAPI/GetLogConsistencyProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixLogAPIClient) GetLogAuditProof(ctx context.Context, in *GetLogAuditProofRequest, opts ...grpc.CallOption) (*ProofResponse, error) {
	out := new(ProofResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLogAPI/GetLogAuditProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixLogAPIClient) GetLogEntries(ctx context.Context, in *GetLogEntriesRequest, opts ...grpc.CallOption) (*LogEntriesResponse, error) {
	out := new(LogEntriesResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLogAPI/GetLogEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixLogAPIClient) GetMapValue(ctx context.Context, in *GetMapValueRequest, opts ...grpc.CallOption) (*MapValueResponse, error) {
	out := new(MapValueResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLogAPI/GetMapValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixLogAPIClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLogAPI/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixLogAPIServer is the server API for TrustixLogAPI service.
// All implementations must embed UnimplementedTrustixLogAPIServer
// for forward compatibility
type TrustixLogAPIServer interface {
	GetSTH(context.Context, *STHRequest) (*schema.STH, error)
	GetLogConsistencyProof(context.Context, *GetLogConsistencyProofRequest) (*ProofResponse, error)
	GetLogAuditProof(context.Context, *GetLogAuditProofRequest) (*ProofResponse, error)
	GetLogEntries(context.Context, *GetLogEntriesRequest) (*LogEntriesResponse, error)
	GetMapValue(context.Context, *GetMapValueRequest) (*MapValueResponse, error)
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	mustEmbedUnimplementedTrustixLogAPIServer()
}

// UnimplementedTrustixLogAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixLogAPIServer struct {
}

func (UnimplementedTrustixLogAPIServer) GetSTH(context.Context, *STHRequest) (*schema.STH, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTH not implemented")
}
func (UnimplementedTrustixLogAPIServer) GetLogConsistencyProof(context.Context, *GetLogConsistencyProofRequest) (*ProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogConsistencyProof not implemented")
}
func (UnimplementedTrustixLogAPIServer) GetLogAuditProof(context.Context, *GetLogAuditProofRequest) (*ProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogAuditProof not implemented")
}
func (UnimplementedTrustixLogAPIServer) GetLogEntries(context.Context, *GetLogEntriesRequest) (*LogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogEntries not implemented")
}
func (UnimplementedTrustixLogAPIServer) GetMapValue(context.Context, *GetMapValueRequest) (*MapValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapValue not implemented")
}
func (UnimplementedTrustixLogAPIServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedTrustixLogAPIServer) mustEmbedUnimplementedTrustixLogAPIServer() {}

// UnsafeTrustixLogAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixLogAPIServer will
// result in compilation errors.
type UnsafeTrustixLogAPIServer interface {
	mustEmbedUnimplementedTrustixLogAPIServer()
}

func RegisterTrustixLogAPIServer(s grpc.ServiceRegistrar, srv TrustixLogAPIServer) {
	s.RegisterService(&_TrustixLogAPI_serviceDesc, srv)
}

func _TrustixLogAPI_GetSTH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STHRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogAPIServer).GetSTH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLogAPI/GetSTH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogAPIServer).GetSTH(ctx, req.(*STHRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixLogAPI_GetLogConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogAPIServer).GetLogConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLogAPI/GetLogConsistencyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogAPIServer).GetLogConsistencyProof(ctx, req.(*GetLogConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixLogAPI_GetLogAuditProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogAuditProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogAPIServer).GetLogAuditProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLogAPI/GetLogAuditProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogAPIServer).GetLogAuditProof(ctx, req.(*GetLogAuditProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixLogAPI_GetLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogAPIServer).GetLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLogAPI/GetLogEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogAPIServer).GetLogEntries(ctx, req.(*GetLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixLogAPI_GetMapValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogAPIServer).GetMapValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLogAPI/GetMapValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogAPIServer).GetMapValue(ctx, req.(*GetMapValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixLogAPI_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogAPIServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLogAPI/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogAPIServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustixLogAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.TrustixLogAPI",
	HandlerType: (*TrustixLogAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSTH",
			Handler:    _TrustixLogAPI_GetSTH_Handler,
		},
		{
			MethodName: "GetLogConsistencyProof",
			Handler:    _TrustixLogAPI_GetLogConsistencyProof_Handler,
		},
		{
			MethodName: "GetLogAuditProof",
			Handler:    _TrustixLogAPI_GetLogAuditProof_Handler,
		},
		{
			MethodName: "GetLogEntries",
			Handler:    _TrustixLogAPI_GetLogEntries_Handler,
		},
		{
			MethodName: "GetMapValue",
			Handler:    _TrustixLogAPI_GetMapValue_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _TrustixLogAPI_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
