syntax = "proto3";

import "schema/sth.proto";
import "schema/logleaf.proto";

option go_package = "github.com/tweag/trustix/api";

package trustix;

message STHRequest {
}

message GetLogConsistencyProofRequest {
  uint64 FirstSize = 1;
  uint64 SecondSize = 2;
}

message ProofResponse {
  repeated bytes Proof = 1;
}

message GetLogAuditProofRequest {
  uint64 Index = 1;
  uint64 TreeSize = 2;
}

message GetLogEntriesRequest {
  uint64 Start = 1;
  uint64 Finish = 2;
}

message GetMapValueRequest {
  bytes Key = 1;
  bytes MapRoot = 2;
}

message SparseCompactMerkleProof {
  repeated bytes SideNodes = 1;
  bytes NonMembershipLeafData = 2;
  bytes BitMask = 3;
  uint64 NumSideNodes = 4;
}

message MapValueResponse {
  // Note that the Value field is actually a MapEntry
  // but we need to return the marshaled version
  // as that's what the proof is created from
  bytes Value = 1;
  SparseCompactMerkleProof Proof = 2;
}

message LogEntriesResponse {
  repeated LogLeaf Leaves = 1;
}

message KeyValuePair {
  bytes Key = 1;
  bytes Value = 2;
}

message SubmitRequest {
  repeated KeyValuePair Items = 1;
}

message SubmitResponse {
  enum Status {
    OK = 0;
  }
  Status status = 1;
}

service TrustixLogAPI {

  rpc GetSTH (STHRequest) returns (STH) {}

  rpc GetLogConsistencyProof(GetLogConsistencyProofRequest) returns (ProofResponse) {}

  rpc GetLogAuditProof(GetLogAuditProofRequest) returns (ProofResponse) {}

  rpc GetLogEntries(GetLogEntriesRequest) returns (LogEntriesResponse) {}

  rpc GetMapValue(GetMapValueRequest) returns (MapValueResponse) {}

  rpc Submit (SubmitRequest) returns (SubmitResponse) {}

}
