{ config, lib, pkgs, ... }:

let
  cfg = config.services.trustix-nix-cache;

  inherit (lib) mkOption types;

in
{

  options.services.trustix-nix-cache = {

    enable = lib.mkEnableOption "Trustix Nix binary cache";

    package = mkOption {
      type = types.package;
      default = pkgs.trustix-nix;
      defaultText = "pkgs.trustix-nix";
      description = "Which Trustix-Nix derivation to use.";
    };

    port = mkOption {
      type = types.int;
      description = "Which port to listen to.";
    };

    private-key = mkOption {
      type = types.path;
      description = "Which binary cache private key to use (generated by nix-store).";
    };

    trustix-rpc = mkOption {
      type = types.path;
      default = "/run/trustix-daemon.socket";
      description = "Which Trustix socket to connect to.";
    };

  };

  config = lib.mkIf cfg.enable {

    systemd.sockets.trustix = {
      description = "Socket for the Trustix daemon";
      wantedBy = [ "sockets.target" ];
      listenStreams = [ (toString cfg.port) ];
    };

    systemd.services.trustix-nix-cache = {
      description = "Trustix Nix binary cache daemon";
      wantedBy = [ "multi-user.target" ];
      requires = [ "trustix.socket" ];

      serviceConfig = {
        Type = "simple";
        ExecStart = "${lib.getBin cfg.package}/bin/trustix-nix binary-cache-proxy --address unix://${cfg.trustix-rpc} --privkey ${cfg.private-key}";
        DynamicUser = true;
      };
    };

  };

}
