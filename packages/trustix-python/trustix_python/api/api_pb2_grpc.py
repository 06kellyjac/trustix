# type: ignore
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from trustix_python.api import api_pb2 as api_dot_api__pb2
from trustix_python.schema import loghead_pb2 as schema_dot_loghead__pb2


class NodeAPIStub(object):
    """NodeAPI is a logical grouping for RPC methods that are for the entire node
    rather than individual logs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Logs = channel.unary_unary(
            "/trustix.NodeAPI/Logs",
            request_serializer=api_dot_api__pb2.LogsRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.LogsResponse.FromString,
        )
        self.GetValue = channel.unary_unary(
            "/trustix.NodeAPI/GetValue",
            request_serializer=api_dot_api__pb2.ValueRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.ValueResponse.FromString,
        )


class NodeAPIServicer(object):
    """NodeAPI is a logical grouping for RPC methods that are for the entire node
    rather than individual logs.
    """

    def Logs(self, request, context):
        """Get a list of all logs published by this node"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetValue(self, request, context):
        """Get values by their content-address"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_NodeAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Logs": grpc.unary_unary_rpc_method_handler(
            servicer.Logs,
            request_deserializer=api_dot_api__pb2.LogsRequest.FromString,
            response_serializer=api_dot_api__pb2.LogsResponse.SerializeToString,
        ),
        "GetValue": grpc.unary_unary_rpc_method_handler(
            servicer.GetValue,
            request_deserializer=api_dot_api__pb2.ValueRequest.FromString,
            response_serializer=api_dot_api__pb2.ValueResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "trustix.NodeAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class NodeAPI(object):
    """NodeAPI is a logical grouping for RPC methods that are for the entire node
    rather than individual logs.
    """

    @staticmethod
    def Logs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.NodeAPI/Logs",
            api_dot_api__pb2.LogsRequest.SerializeToString,
            api_dot_api__pb2.LogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetValue(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.NodeAPI/GetValue",
            api_dot_api__pb2.ValueRequest.SerializeToString,
            api_dot_api__pb2.ValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class LogAPIStub(object):
    """LogAPI is a logical grouping for RPC methods that are specific to a given log."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetHead = channel.unary_unary(
            "/trustix.LogAPI/GetHead",
            request_serializer=api_dot_api__pb2.LogHeadRequest.SerializeToString,
            response_deserializer=schema_dot_loghead__pb2.LogHead.FromString,
        )
        self.GetLogConsistencyProof = channel.unary_unary(
            "/trustix.LogAPI/GetLogConsistencyProof",
            request_serializer=api_dot_api__pb2.GetLogConsistencyProofRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.ProofResponse.FromString,
        )
        self.GetLogAuditProof = channel.unary_unary(
            "/trustix.LogAPI/GetLogAuditProof",
            request_serializer=api_dot_api__pb2.GetLogAuditProofRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.ProofResponse.FromString,
        )
        self.GetLogEntries = channel.unary_unary(
            "/trustix.LogAPI/GetLogEntries",
            request_serializer=api_dot_api__pb2.GetLogEntriesRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.LogEntriesResponse.FromString,
        )
        self.GetMapValue = channel.unary_unary(
            "/trustix.LogAPI/GetMapValue",
            request_serializer=api_dot_api__pb2.GetMapValueRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.MapValueResponse.FromString,
        )
        self.GetMHLogConsistencyProof = channel.unary_unary(
            "/trustix.LogAPI/GetMHLogConsistencyProof",
            request_serializer=api_dot_api__pb2.GetLogConsistencyProofRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.ProofResponse.FromString,
        )
        self.GetMHLogAuditProof = channel.unary_unary(
            "/trustix.LogAPI/GetMHLogAuditProof",
            request_serializer=api_dot_api__pb2.GetLogAuditProofRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.ProofResponse.FromString,
        )
        self.GetMHLogEntries = channel.unary_unary(
            "/trustix.LogAPI/GetMHLogEntries",
            request_serializer=api_dot_api__pb2.GetLogEntriesRequest.SerializeToString,
            response_deserializer=api_dot_api__pb2.LogEntriesResponse.FromString,
        )


class LogAPIServicer(object):
    """LogAPI is a logical grouping for RPC methods that are specific to a given log."""

    def GetHead(self, request, context):
        """Get signed head"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLogConsistencyProof(self, request, context):
        """Log"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLogAuditProof(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLogEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMapValue(self, request, context):
        """Map"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMHLogConsistencyProof(self, request, context):
        """Maphead log"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMHLogAuditProof(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMHLogEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_LogAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetHead": grpc.unary_unary_rpc_method_handler(
            servicer.GetHead,
            request_deserializer=api_dot_api__pb2.LogHeadRequest.FromString,
            response_serializer=schema_dot_loghead__pb2.LogHead.SerializeToString,
        ),
        "GetLogConsistencyProof": grpc.unary_unary_rpc_method_handler(
            servicer.GetLogConsistencyProof,
            request_deserializer=api_dot_api__pb2.GetLogConsistencyProofRequest.FromString,
            response_serializer=api_dot_api__pb2.ProofResponse.SerializeToString,
        ),
        "GetLogAuditProof": grpc.unary_unary_rpc_method_handler(
            servicer.GetLogAuditProof,
            request_deserializer=api_dot_api__pb2.GetLogAuditProofRequest.FromString,
            response_serializer=api_dot_api__pb2.ProofResponse.SerializeToString,
        ),
        "GetLogEntries": grpc.unary_unary_rpc_method_handler(
            servicer.GetLogEntries,
            request_deserializer=api_dot_api__pb2.GetLogEntriesRequest.FromString,
            response_serializer=api_dot_api__pb2.LogEntriesResponse.SerializeToString,
        ),
        "GetMapValue": grpc.unary_unary_rpc_method_handler(
            servicer.GetMapValue,
            request_deserializer=api_dot_api__pb2.GetMapValueRequest.FromString,
            response_serializer=api_dot_api__pb2.MapValueResponse.SerializeToString,
        ),
        "GetMHLogConsistencyProof": grpc.unary_unary_rpc_method_handler(
            servicer.GetMHLogConsistencyProof,
            request_deserializer=api_dot_api__pb2.GetLogConsistencyProofRequest.FromString,
            response_serializer=api_dot_api__pb2.ProofResponse.SerializeToString,
        ),
        "GetMHLogAuditProof": grpc.unary_unary_rpc_method_handler(
            servicer.GetMHLogAuditProof,
            request_deserializer=api_dot_api__pb2.GetLogAuditProofRequest.FromString,
            response_serializer=api_dot_api__pb2.ProofResponse.SerializeToString,
        ),
        "GetMHLogEntries": grpc.unary_unary_rpc_method_handler(
            servicer.GetMHLogEntries,
            request_deserializer=api_dot_api__pb2.GetLogEntriesRequest.FromString,
            response_serializer=api_dot_api__pb2.LogEntriesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "trustix.LogAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class LogAPI(object):
    """LogAPI is a logical grouping for RPC methods that are specific to a given log."""

    @staticmethod
    def GetHead(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetHead",
            api_dot_api__pb2.LogHeadRequest.SerializeToString,
            schema_dot_loghead__pb2.LogHead.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLogConsistencyProof(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetLogConsistencyProof",
            api_dot_api__pb2.GetLogConsistencyProofRequest.SerializeToString,
            api_dot_api__pb2.ProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLogAuditProof(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetLogAuditProof",
            api_dot_api__pb2.GetLogAuditProofRequest.SerializeToString,
            api_dot_api__pb2.ProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLogEntries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetLogEntries",
            api_dot_api__pb2.GetLogEntriesRequest.SerializeToString,
            api_dot_api__pb2.LogEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMapValue(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetMapValue",
            api_dot_api__pb2.GetMapValueRequest.SerializeToString,
            api_dot_api__pb2.MapValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMHLogConsistencyProof(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetMHLogConsistencyProof",
            api_dot_api__pb2.GetLogConsistencyProofRequest.SerializeToString,
            api_dot_api__pb2.ProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMHLogAuditProof(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetMHLogAuditProof",
            api_dot_api__pb2.GetLogAuditProofRequest.SerializeToString,
            api_dot_api__pb2.ProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetMHLogEntries(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trustix.LogAPI/GetMHLogEntries",
            api_dot_api__pb2.GetLogEntriesRequest.SerializeToString,
            api_dot_api__pb2.LogEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
