// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	api "github.com/tweag/trustix/packages/trustix-proto/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrustixRPCClient is the client API for TrustixRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixRPCClient interface {
	// Get map[LogID]Log
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
	// TODO: I'm not sure if this belongs here in it's current shape...
	GetLogEntries(ctx context.Context, in *api.GetLogEntriesRequest, opts ...grpc.CallOption) (*api.LogEntriesResponse, error)
	// Get map[LogID]OutputHash
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*EntriesResponse, error)
	GetStream(ctx context.Context, opts ...grpc.CallOption) (TrustixRPC_GetStreamClient, error)
	// Compare(inputHash)
	Decide(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DecisionResponse, error)
	DecideStream(ctx context.Context, opts ...grpc.CallOption) (TrustixRPC_DecideStreamClient, error)
	// Get stored value by digest (TODO: Remove, it's a duplicate from api.proto
	GetValue(ctx context.Context, in *api.ValueRequest, opts ...grpc.CallOption) (*api.ValueResponse, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
}

type trustixRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixRPCClient(cc grpc.ClientConnInterface) TrustixRPCClient {
	return &trustixRPCClient{cc}
}

func (c *trustixRPCClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) GetLogEntries(ctx context.Context, in *api.GetLogEntriesRequest, opts ...grpc.CallOption) (*api.LogEntriesResponse, error) {
	out := new(api.LogEntriesResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/GetLogEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*EntriesResponse, error) {
	out := new(EntriesResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (TrustixRPC_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrustixRPC_ServiceDesc.Streams[0], "/trustix.TrustixRPC/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &trustixRPCGetStreamClient{stream}
	return x, nil
}

type TrustixRPC_GetStreamClient interface {
	Send(*KeyRequest) error
	Recv() (*EntriesResponse, error)
	grpc.ClientStream
}

type trustixRPCGetStreamClient struct {
	grpc.ClientStream
}

func (x *trustixRPCGetStreamClient) Send(m *KeyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trustixRPCGetStreamClient) Recv() (*EntriesResponse, error) {
	m := new(EntriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trustixRPCClient) Decide(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*DecisionResponse, error) {
	out := new(DecisionResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/Decide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) DecideStream(ctx context.Context, opts ...grpc.CallOption) (TrustixRPC_DecideStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrustixRPC_ServiceDesc.Streams[1], "/trustix.TrustixRPC/DecideStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &trustixRPCDecideStreamClient{stream}
	return x, nil
}

type TrustixRPC_DecideStreamClient interface {
	Send(*KeyRequest) error
	Recv() (*DecisionResponse, error)
	grpc.ClientStream
}

type trustixRPCDecideStreamClient struct {
	grpc.ClientStream
}

func (x *trustixRPCDecideStreamClient) Send(m *KeyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trustixRPCDecideStreamClient) Recv() (*DecisionResponse, error) {
	m := new(DecisionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trustixRPCClient) GetValue(ctx context.Context, in *api.ValueRequest, opts ...grpc.CallOption) (*api.ValueResponse, error) {
	out := new(api.ValueResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixRPCServer is the server API for TrustixRPC service.
// All implementations must embed UnimplementedTrustixRPCServer
// for forward compatibility
type TrustixRPCServer interface {
	// Get map[LogID]Log
	Logs(context.Context, *LogsRequest) (*LogsResponse, error)
	// TODO: I'm not sure if this belongs here in it's current shape...
	GetLogEntries(context.Context, *api.GetLogEntriesRequest) (*api.LogEntriesResponse, error)
	// Get map[LogID]OutputHash
	Get(context.Context, *KeyRequest) (*EntriesResponse, error)
	GetStream(TrustixRPC_GetStreamServer) error
	// Compare(inputHash)
	Decide(context.Context, *KeyRequest) (*DecisionResponse, error)
	DecideStream(TrustixRPC_DecideStreamServer) error
	// Get stored value by digest (TODO: Remove, it's a duplicate from api.proto
	GetValue(context.Context, *api.ValueRequest) (*api.ValueResponse, error)
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	mustEmbedUnimplementedTrustixRPCServer()
}

// UnimplementedTrustixRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixRPCServer struct {
}

func (UnimplementedTrustixRPCServer) Logs(context.Context, *LogsRequest) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedTrustixRPCServer) GetLogEntries(context.Context, *api.GetLogEntriesRequest) (*api.LogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogEntries not implemented")
}
func (UnimplementedTrustixRPCServer) Get(context.Context, *KeyRequest) (*EntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTrustixRPCServer) GetStream(TrustixRPC_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedTrustixRPCServer) Decide(context.Context, *KeyRequest) (*DecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decide not implemented")
}
func (UnimplementedTrustixRPCServer) DecideStream(TrustixRPC_DecideStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DecideStream not implemented")
}
func (UnimplementedTrustixRPCServer) GetValue(context.Context, *api.ValueRequest) (*api.ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedTrustixRPCServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedTrustixRPCServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedTrustixRPCServer) mustEmbedUnimplementedTrustixRPCServer() {}

// UnsafeTrustixRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixRPCServer will
// result in compilation errors.
type UnsafeTrustixRPCServer interface {
	mustEmbedUnimplementedTrustixRPCServer()
}

func RegisterTrustixRPCServer(s grpc.ServiceRegistrar, srv TrustixRPCServer) {
	s.RegisterService(&TrustixRPC_ServiceDesc, srv)
}

func _TrustixRPC_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).Logs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_GetLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GetLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).GetLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/GetLogEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).GetLogEntries(ctx, req.(*api.GetLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrustixRPCServer).GetStream(&trustixRPCGetStreamServer{stream})
}

type TrustixRPC_GetStreamServer interface {
	Send(*EntriesResponse) error
	Recv() (*KeyRequest, error)
	grpc.ServerStream
}

type trustixRPCGetStreamServer struct {
	grpc.ServerStream
}

func (x *trustixRPCGetStreamServer) Send(m *EntriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trustixRPCGetStreamServer) Recv() (*KeyRequest, error) {
	m := new(KeyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrustixRPC_Decide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).Decide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/Decide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).Decide(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_DecideStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrustixRPCServer).DecideStream(&trustixRPCDecideStreamServer{stream})
}

type TrustixRPC_DecideStreamServer interface {
	Send(*DecisionResponse) error
	Recv() (*KeyRequest, error)
	grpc.ServerStream
}

type trustixRPCDecideStreamServer struct {
	grpc.ServerStream
}

func (x *trustixRPCDecideStreamServer) Send(m *DecisionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trustixRPCDecideStreamServer) Recv() (*KeyRequest, error) {
	m := new(KeyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrustixRPC_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).GetValue(ctx, req.(*api.ValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustixRPC_ServiceDesc is the grpc.ServiceDesc for TrustixRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustixRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.TrustixRPC",
	HandlerType: (*TrustixRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Logs",
			Handler:    _TrustixRPC_Logs_Handler,
		},
		{
			MethodName: "GetLogEntries",
			Handler:    _TrustixRPC_GetLogEntries_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TrustixRPC_Get_Handler,
		},
		{
			MethodName: "Decide",
			Handler:    _TrustixRPC_Decide_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _TrustixRPC_GetValue_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _TrustixRPC_Submit_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _TrustixRPC_Flush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _TrustixRPC_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DecideStream",
			Handler:       _TrustixRPC_DecideStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
