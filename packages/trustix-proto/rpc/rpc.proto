syntax = "proto2";

import "schema/mapentry.proto";
import "api/api.proto";

option go_package = "github.com/tweag/trustix/packages/trustix-proto/rpc";

package trustix;

// TrustixRPC
service TrustixRPC {
  // Get map[LogID]Log (all local logs)
  rpc Logs (LogsRequest) returns (LogsResponse) {}

  rpc GetLogEntries(GetLogEntriesRequest) returns (LogEntriesResponse) {}

  // Get map[LogID]OutputHash
  rpc Get (KeyRequest) returns (EntriesResponse) {}

  // Compare(inputHash)
  rpc Decide (KeyRequest) returns (DecisionResponse) {}

  // Get stored value by digest (TODO: Remove, it's a duplicate from api.proto
  rpc GetValue (ValueRequest) returns (ValueResponse) {}

  rpc Submit (SubmitRequest) returns (SubmitResponse) {}
  rpc Flush (FlushRequest) returns (FlushResponse) {}
}

message KeyRequest {
  required bytes Key = 1;
}

message EntriesResponse {
  required bytes Key = 1;
  map<string, MapEntry> Entries = 2;
}

message LogValueResponse {
  required string LogID = 1;
  required bytes Digest = 2;
}

message LogValueDecision {
  repeated string LogIDs = 1;
  required bytes Digest = 2;
  required int32 Confidence = 3;
  required bytes Value = 4;
}

message DecisionResponse {
  required LogValueDecision Decision = 1;

  // Non-matches (hash mismatch)
  repeated LogValueResponse Mismatches = 2;

  // Full misses (log ids missing log entry entirely)
  repeated string Misses = 3;
}

message SubmitRequest {
  required string LogID = 1;
  repeated KeyValuePair Items = 2;
}

message SubmitResponse {
  enum Status {
    OK = 0;
  }
 required Status status = 1;
}

message FlushRequest {
  required string LogID = 1;
}

message FlushResponse {
}
