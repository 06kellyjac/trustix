// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// const _ = grpc.SupportPackageIsVersion7

// TrustixClient is the client API for Trustix service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixClient interface {
	SubmitMapping(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error)
}

type trustixClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixClient(cc grpc.ClientConnInterface) TrustixClient {
	return &trustixClient{cc}
}

func (c *trustixClient) SubmitMapping(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/trustix.Trustix/SubmitMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixServer is the server API for Trustix service.
// All implementations must embed UnimplementedTrustixServer
// for forward compatibility
type TrustixServer interface {
	SubmitMapping(context.Context, *SubmitRequest) (*SubmitReply, error)
	mustEmbedUnimplementedTrustixServer()
}

// UnimplementedTrustixServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixServer struct {
}

func (UnimplementedTrustixServer) SubmitMapping(context.Context, *SubmitRequest) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMapping not implemented")
}
func (UnimplementedTrustixServer) mustEmbedUnimplementedTrustixServer() {}

// UnsafeTrustixServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixServer will
// result in compilation errors.
type UnsafeTrustixServer interface {
	mustEmbedUnimplementedTrustixServer()
}

func RegisterTrustixServer(s *grpc.Server, srv TrustixServer) {
	s.RegisterService(&_Trustix_serviceDesc, srv)
}

func _Trustix_SubmitMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixServer).SubmitMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.Trustix/SubmitMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixServer).SubmitMapping(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trustix_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.Trustix",
	HandlerType: (*TrustixServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMapping",
			Handler:    _Trustix_SubmitMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trustix.proto",
}
