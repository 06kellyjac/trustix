// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrustixRPCClient is the client API for TrustixRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixRPCClient interface {
	// SubmitMapping - Submit an input/output mapping to the local log
	SubmitMapping(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	// QueryMapping - Query a mapping from the local log
	QueryMapping(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type trustixRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixRPCClient(cc grpc.ClientConnInterface) TrustixRPCClient {
	return &trustixRPCClient{cc}
}

func (c *trustixRPCClient) SubmitMapping(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/SubmitMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) QueryMapping(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/QueryMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixRPCServer is the server API for TrustixRPC service.
// All implementations must embed UnimplementedTrustixRPCServer
// for forward compatibility
type TrustixRPCServer interface {
	// SubmitMapping - Submit an input/output mapping to the local log
	SubmitMapping(context.Context, *SubmitRequest) (*SubmitResponse, error)
	// QueryMapping - Query a mapping from the local log
	QueryMapping(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedTrustixRPCServer()
}

// UnimplementedTrustixRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixRPCServer struct {
}

func (UnimplementedTrustixRPCServer) SubmitMapping(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMapping not implemented")
}
func (UnimplementedTrustixRPCServer) QueryMapping(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMapping not implemented")
}
func (UnimplementedTrustixRPCServer) mustEmbedUnimplementedTrustixRPCServer() {}

// UnsafeTrustixRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixRPCServer will
// result in compilation errors.
type UnsafeTrustixRPCServer interface {
	mustEmbedUnimplementedTrustixRPCServer()
}

func RegisterTrustixRPCServer(s *grpc.Server, srv TrustixRPCServer) {
	s.RegisterService(&_TrustixRPC_serviceDesc, srv)
}

func _TrustixRPC_SubmitMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).SubmitMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/SubmitMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).SubmitMapping(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_QueryMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).QueryMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/QueryMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).QueryMapping(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustixRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.TrustixRPC",
	HandlerType: (*TrustixRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMapping",
			Handler:    _TrustixRPC_SubmitMapping_Handler,
		},
		{
			MethodName: "QueryMapping",
			Handler:    _TrustixRPC_QueryMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trustix.proto",
}
