// MIT License
//
// Copyright (c) 2020 Tweag IO
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrustixRPCClient is the client API for TrustixRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixRPCClient interface {
	// SubmitMapping - Submit an input/output mapping to the local log
	SubmitMapping(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	// QueryMapping - Query a mapping from the local log
	QueryMapping(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type trustixRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixRPCClient(cc grpc.ClientConnInterface) TrustixRPCClient {
	return &trustixRPCClient{cc}
}

func (c *trustixRPCClient) SubmitMapping(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/SubmitMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustixRPCClient) QueryMapping(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixRPC/QueryMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixRPCServer is the server API for TrustixRPC service.
// All implementations must embed UnimplementedTrustixRPCServer
// for forward compatibility
type TrustixRPCServer interface {
	// SubmitMapping - Submit an input/output mapping to the local log
	SubmitMapping(context.Context, *SubmitRequest) (*SubmitResponse, error)
	// QueryMapping - Query a mapping from the local log
	QueryMapping(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedTrustixRPCServer()
}

// UnimplementedTrustixRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixRPCServer struct {
}

func (UnimplementedTrustixRPCServer) SubmitMapping(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMapping not implemented")
}
func (UnimplementedTrustixRPCServer) QueryMapping(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMapping not implemented")
}
func (UnimplementedTrustixRPCServer) mustEmbedUnimplementedTrustixRPCServer() {}

// UnsafeTrustixRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixRPCServer will
// result in compilation errors.
type UnsafeTrustixRPCServer interface {
	mustEmbedUnimplementedTrustixRPCServer()
}

func RegisterTrustixRPCServer(s *grpc.Server, srv TrustixRPCServer) {
	s.RegisterService(&_TrustixRPC_serviceDesc, srv)
}

func _TrustixRPC_SubmitMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).SubmitMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/SubmitMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).SubmitMapping(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustixRPC_QueryMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixRPCServer).QueryMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixRPC/QueryMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixRPCServer).QueryMapping(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustixRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.TrustixRPC",
	HandlerType: (*TrustixRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMapping",
			Handler:    _TrustixRPC_SubmitMapping_Handler,
		},
		{
			MethodName: "QueryMapping",
			Handler:    _TrustixRPC_QueryMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trustix.proto",
}

// TrustixKVClient is the client API for TrustixKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixKVClient interface {
	// SubmitMapping - Submit an input/output mapping to the local log
	Get(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error)
}

type trustixKVClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixKVClient(cc grpc.ClientConnInterface) TrustixKVClient {
	return &trustixKVClient{cc}
}

func (c *trustixKVClient) Get(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error) {
	out := new(KVResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixKV/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixKVServer is the server API for TrustixKV service.
// All implementations must embed UnimplementedTrustixKVServer
// for forward compatibility
type TrustixKVServer interface {
	// SubmitMapping - Submit an input/output mapping to the local log
	Get(context.Context, *KVRequest) (*KVResponse, error)
	mustEmbedUnimplementedTrustixKVServer()
}

// UnimplementedTrustixKVServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixKVServer struct {
}

func (UnimplementedTrustixKVServer) Get(context.Context, *KVRequest) (*KVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTrustixKVServer) mustEmbedUnimplementedTrustixKVServer() {}

// UnsafeTrustixKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixKVServer will
// result in compilation errors.
type UnsafeTrustixKVServer interface {
	mustEmbedUnimplementedTrustixKVServer()
}

func RegisterTrustixKVServer(s *grpc.Server, srv TrustixKVServer) {
	s.RegisterService(&_TrustixKV_serviceDesc, srv)
}

func _TrustixKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixKV/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixKVServer).Get(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustixKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.TrustixKV",
	HandlerType: (*TrustixKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TrustixKV_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trustix.proto",
}

// TrustixLogClient is the client API for TrustixLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustixLogClient interface {
	// Get map[LogName]OutputHash
	HashMap(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashMapResponse, error)
}

type trustixLogClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustixLogClient(cc grpc.ClientConnInterface) TrustixLogClient {
	return &trustixLogClient{cc}
}

func (c *trustixLogClient) HashMap(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashMapResponse, error) {
	out := new(HashMapResponse)
	err := c.cc.Invoke(ctx, "/trustix.TrustixLog/HashMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustixLogServer is the server API for TrustixLog service.
// All implementations must embed UnimplementedTrustixLogServer
// for forward compatibility
type TrustixLogServer interface {
	// Get map[LogName]OutputHash
	HashMap(context.Context, *HashRequest) (*HashMapResponse, error)
	mustEmbedUnimplementedTrustixLogServer()
}

// UnimplementedTrustixLogServer must be embedded to have forward compatible implementations.
type UnimplementedTrustixLogServer struct {
}

func (UnimplementedTrustixLogServer) HashMap(context.Context, *HashRequest) (*HashMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashMap not implemented")
}
func (UnimplementedTrustixLogServer) mustEmbedUnimplementedTrustixLogServer() {}

// UnsafeTrustixLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustixLogServer will
// result in compilation errors.
type UnsafeTrustixLogServer interface {
	mustEmbedUnimplementedTrustixLogServer()
}

func RegisterTrustixLogServer(s *grpc.Server, srv TrustixLogServer) {
	s.RegisterService(&_TrustixLog_serviceDesc, srv)
}

func _TrustixLog_HashMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustixLogServer).HashMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trustix.TrustixLog/HashMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustixLogServer).HashMap(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrustixLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trustix.TrustixLog",
	HandlerType: (*TrustixLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HashMap",
			Handler:    _TrustixLog_HashMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trustix.proto",
}
